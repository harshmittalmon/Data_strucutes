
class Solution {
public:
    void mark_parents(TreeNode* root,map<TreeNode*,TreeNode*> &parent_node){
        queue<TreeNode*>queue;
        queue.push(root);
        while(!queue.empty()){
            TreeNode* fr = queue.front();
            queue.pop();
            if(fr->left){
                parent_node[fr->left]=fr;
                queue.push(fr->left);
            }
            if(fr->right){
                parent_node[fr->right]=fr;
                queue.push(fr->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        map<TreeNode*,TreeNode*> parent_node;
        mark_parents(root,parent_node);
        
        unordered_map<TreeNode*,bool> visited;
        visited[target]=true;
        queue<TreeNode*> q;
        q.push(target);
        int curr_level =0;
        while(!q.empty()){
            int size = q.size();
            if(curr_level++ ==  k)break;
            for(int i=0;i<size;i++){
                TreeNode*current = q.front();
                q.pop();
                //left
                if(current->left && visited[current->left]==false){
                    q.push(current->left);
                    visited[current->left]=true;
                }
                //right
                if(current->right && visited[current->right]==false){
                    q.push(current->right);
                    visited[current->right]=true;
                }
                //top
                if(parent_node[current] && visited[parent_node[current]]==false){
                    q.push(parent_node[current]);
                    visited[parent_node[current]]=true;
                }
            }
            
        }
        vector<int> ans;
        while(!q.empty()){
            TreeNode * temp = q.front();
            q.pop();
            ans.push_back(temp->val);
        }
        return ans;
    }
};
