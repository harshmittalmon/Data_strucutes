
/////////////bfs---------------------------
class Solution {
public:


    
	bool colour(int start,int v,vector<int>adj[],int color[]){
	    queue<int> q;
	    q.push(start);
        color[start]=0;
	    while(!q.empty()){
	        int front = q.front();
	        q.pop();
	        for(int i=0;i<adj[front].size();i++){
	            if(color[adj[front][i]]==-1){
	                color[adj[front][i]]= color[front] == 0? 1:0;
	                q.push(adj[front][i]);
	            }
	            else if(color[front]==color[adj[front][i]]){
	                return false;
	            }
	        }
	    }
	    return true;
	}
	
	
	bool isBipartite(int V,     vector<int>adj[]){
	    int arr[V];
	    for(int i=0;i<V;i++)arr[i]=-1;
	    for(int i=0;i<V;i++){
	        if(arr[i]==-1){
	            if(!colour(i,V,adj,arr))return false;
	        }
	    }
	    return true;
	}

};


// DFS------------------------------------------
class Solution {
public:


    
	bool colour(int start,int v,vector<int>adj[],int color[]){
	    queue<int> q;
	    q.push(start);
        color[start]=0;
	    while(!q.empty()){
	        int front = q.front();
	        q.pop();
	        for(int i=0;i<adj[front].size();i++){
	            if(color[adj[front][i]]==-1){
	                color[adj[front][i]]= color[front] == 0? 1:0;
	                q.push(adj[front][i]);
	            }
	            else if(color[front]==color[adj[front][i]]){
	                return false;
	            }
	        }
	    }
	    return true;
	}
	
	
	bool isBipartite(int V,     vector<int>adj[]){
	    int arr[V];
	    for(int i=0;i<V;i++)arr[i]=-1;
	    for(int i=0;i<V;i++){
	        if(arr[i]==-1){
	            if(!colour(i,V,adj,arr))return false;
	        }
	    }
	    return true;
	}

};
