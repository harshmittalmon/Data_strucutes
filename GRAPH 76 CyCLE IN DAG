KAHN'S ALGO (BFS)----------------------------------------------------------

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> indegree(V);
        int cnt=0;
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        for(auto j : adj[i])
	        indegree[j]++;
	    }
	    for(int i=0;i<V;i++){
	        if(indegree[i]==0)q.push(i);
	    }
	    while(!q.empty()){
	        int ele = q.front();q.pop();
	        cnt++;
	        for(auto & j : adj[ele]){
	            indegree[j]--;
	            if(indegree[j]==0)q.push(j);
	        }
	    }
	    return !(cnt==V);
    }
};



DFS -----------------------------------------------------

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    
    
    bool dfs(int i,vector<int> adj[],int vis[],int pathvis[]){
        vis[i]=1,pathvis[i]=1;
        for(auto it : adj[i]){
            if(!vis[it]){
                if(dfs(it,adj,vis,pathvis))return true;
            }   
            else if(pathvis[it])return true;
        }
        pathvis[i]=0;return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        int vis[V]={0} ;
        int pathvis[V]={0};
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(dfs(i,adj,vis,pathvis))return true;
            }
            
        }
        return false;
    }
};
