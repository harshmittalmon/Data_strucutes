DFS-------------------------------------------------------------------------

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void dfs(int i,vector<int> adj[], vector<int> & vis, stack<int> & st){
	    vis[i]=1;
	    for(auto & j : adj[i]){
	        if(!vis[j])dfs(j,adj,vis,st);
	    }
	    st.push(i);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> vis(V),ans;
	    stack<int> st;
	    for(int i=0;i<V;i++){
	        if(!vis[i])dfs(i,adj,vis,st);
	    }
	    while(!st.empty()){
	        int ele = st.top();st.pop();
	        ans.push_back(ele);
	    }
	    return ans;
	}
};


BFS------------------------------------------------------------------------

	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> indegree(V),ans;
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        for(auto j : adj[i])
	        indegree[j]++;
	    }
	    for(int i=0;i<V;i++){
	        if(indegree[i]==0)q.push(i);
	    }
	    while(!q.empty()){
	        int ele = q.front();q.pop();
	        ans.push_back(ele);
	        for(auto & j : adj[ele]){
	            indegree[j]--;
	            if(indegree[j]==0)q.push(j);
	        }
	    }
	    return ans;
	}
