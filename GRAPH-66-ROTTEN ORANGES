//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size(),m = grid[0].size();
        vector<vector<int>> vis(n,vector<int> (m));
        queue<pair<pair<int,int>,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push( { {i,j} , 0 }  );
                    vis[i][j]=2;
                }
                else vis[i][j]=0;
            }
        }
        int ans = 0;
        int rowarr[4]={-1,0,1,0};
        int colarr[4]={0,1,0,-1};
        while(!q.empty()){
            auto top = q.front();
            ans = max(ans,top.second);
            q.pop();
            for(int i=0;i<4;i++){
                int newr = top.first.first + rowarr[i];
                int newc = top.first.second + colarr[i];
                if( newr>=0 and newc>=0 and newr<n and newc<m and vis[newr][newc]==0 and grid[newr][newc]==1){
                    q.push({{newr,newc},top.second+1});
                    vis[newr][newc]=2;
                }
            }
            
            
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]!=2 and grid[i][j]==1)return -1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.orangesRotting(grid);
		cout << ans << "\n";
	}
	return 0;
}
// } Driver Code Ends
