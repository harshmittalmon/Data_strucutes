//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    int row[4]={-1,0,1,0};
    int col[4]={0 ,1,0,-1};
    bool isokay(int i,int j , int n ,int m){
        if(i>=0 and i<n and j>=0 and j<m)return true;
        return false;
    }
    void dfs(vector<vector<int>> & image ,vector<vector<int>>& ans,int n,int m , int i , int j,int pclr,int nclr){
        ans[i][j]=nclr;
        for(int k=0;k<4;k++){
            int newr = i+row[k];
            int newc = j+col[k];
            if(isokay(newr,newc,n,m) and image[newr][newc]==pclr and ans[newr][newc]!=nclr){
                dfs(image,ans,n,m,newr,newc,pclr,nclr);
            }
        }
        
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newcolor) {
        int prvclr= image[sr][sc];
        int n= image.size(),m=image[0].size();
        vector<vector<int>> ans=image;
        dfs(image,ans,n,m,sr,sc,prvclr,newcolor);
        return ans;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>image(n, vector<int>(m,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> image[i][j];
		}
		int sr, sc, newColor;
		cin >> sr >> sc >> newColor;
		Solution obj;
		vector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);
		for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends
