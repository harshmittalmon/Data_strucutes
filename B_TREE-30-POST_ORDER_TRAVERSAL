method 1 recursion tc = oc = 0(n)
class Solution {
public:
    void func(TreeNode * root,vector<int> &ans){
        if(root==NULL) return;
        
        func(root->left,ans);
        func(root->right,ans);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        func(root,ans);
        return ans;    
    }
};



METHOD 2  sc = o(2h) tc = o(n)
class Solution {
public:
    void func(TreeNode * root,vector<int> &ans){
        if (root == NULL) return ;
        stack<TreeNode*> st1,st2;
        st1.push(root);
        while(!st1.empty() ){
            TreeNode * temp = st1.top();
            st1.pop();
            st2.push(temp);
            
            if(temp->left != NULL)st1.push(temp->left);
            if(temp->right != NULL ) st1.push(temp-> right);
            
        }
        while(!st2.empty()){
            ans.push_back(st2.top()->val);
            st2.pop();
        }
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        func(root,ans);
        return ans;    
    }
};



METHOD 3 USING ONE STACK ONLY  tc= 0(2n) sc = 0(h) h = depth of tree
class Solution {
public:
    void func(TreeNode * root,vector<int> &ans){
        if (root == NULL) return ;
        stack<TreeNode*> st;
        TreeNode * curr = root;
        TreeNode * temp = NULL ;
        while(!st.empty() or curr!=NULL ){
            if(curr==NULL){
                temp = st.top()->right;
                if(temp!=NULL){
                    curr= temp;
                }
                else{
                    temp = st.top();
                    st.pop();
                    ans.push_back(temp->val);
                    while(!st.empty() and temp==st.top()->right){
                        
                        temp = st.top();
                        st.pop();
                        ans.push_back(temp->val);
                        
                    }
                }
            }
            else{
                st.push(curr);
                curr=curr->left;
            }
            
        }
        
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        func(root,ans);
        return ans;    
    }
};

