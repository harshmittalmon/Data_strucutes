//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C+
class Solution {
  public:
    int row[4] = {-1, 0, 1, 0};
    int col[4] = {0, 1, 0, -1};
    
    bool isokay(int i, int j, int n, int m) {
        return (i >= 0 and j >= 0 and i < n and j < m);
    }
    
    void bfs(int i , int j , vector<vector<int>> & mat, vector<vector<int>> & vis){
        vis[i][j]=1;
        queue<pair<int,int>> q;
        int n = mat.size();
        int m = mat[0].size();
        q.push({i,j});
        while(!q.empty()){
            auto top = q.front();
            q.pop();
            for(int k =0 ;k<4;k++){
                int newr = top.first+row[k];
                int newc = top.second+ col[k];
                if( isokay(newr,newc,n,m) and mat[newr][newc]==1 and !vis[newr][newc] ){
                    q.push({newr,newc});
                    vis[newr][newc]=1;
                }
            }
        }
    }
    
    
    int numberOfEnclaves(vector<vector<int>> & mat) {
        // Code here
        int n = mat.size(),m=mat[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        
       for(int i = 0; i < n; i++) {
            if(mat[i][0] == 1 and !vis[i][0]) {
                bfs(i, 0, mat, vis);
            }
            if(mat[i][m - 1] == 1 and !vis[i][m - 1]) {
                bfs(i, m - 1, mat, vis);
            }
        }
        
        for(int i = 0; i < m; i++) {
            if(mat[0][i] ==1 and !vis[0][i]) {
                bfs(0, i, mat, vis);
            }
            if(mat[n - 1][i] == 1 and !vis[n - 1][i]) {
                bfs(n - 1, i, mat, vis);
            }
        }
        
        
        
        int count = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(mat[i][j] == 1 and !vis[i][j]) {
                    count++;
                }
            }
            
        }
        return count;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.numberOfEnclaves(grid) << endl;
    }
}
// } Driver Code Ends
